#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('memory-game:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server)

const stats = require("stats-lite")
const observe = require('observe')
const mongoose = require('mongoose')
const Weight = mongoose.model('Weight')

let weightBuffer = []

require('../api/controllers/scale')

let vehicle = {
  weight: 0
}

let observer = observe(vehicle)

module.exports.getWeights = (weight) => {

  if (weight != observer.subject.weight) {
    observer.set('weight', weight)
  }

  if (weight !== undefined && typeof (weight) === 'number' && !isNaN(weight) && weight > 200) {
    weightBuffer.push(weight);
  }

  if (weight < 200 && !isNaN(weight)) {

    const avgWeight = stats.mode(weightBuffer)

    weightBuffer.length = 0

    if (avgWeight !== undefined && typeof (avgWeight) === 'number' && !isNaN(avgWeight) && avgWeight > 500) {

      let newWeight = new Weight()
      newWeight.weight = avgWeight
      newWeight.date = new Date()
      newWeight.save(function (err, product) {
        if (err) {
          console.log(err)
        }
        console.log(product + ' saved to db!')
      })
    }
  }

}

io.on('connection', function (client) {

  client.emit('connectStatus', 'Server Connected');

  client.on('join', function (data) {
    console.log(data);
  });

  client.on('join', function () {

    function tableUpdate() {
      Weight.find({}).sort({ date: -1 }).exec(function (err, result) {
        if (err) throw err

        if (result) {

          let todayWeights = []
          let today = new Date()
          let cYear = today.getFullYear()
          let cMonth = today.getMonth() + 1
          let cDay = today.getDate()

          for (var i = 0; i < this.result.length; i++) {

            let date = result[i].date
            let year = date.getFullYear()
            let month = date.getMonth() + 1
            let day = date.GetDate()

            if (year === cYear && month === cMonth && day === cDay) {
              todayWeights.push(result[i])
            }
          }
          client.emit('tableupdate', todayWeights)

        }
      })
    }

    tableUpdate()

    observer.on('change', (change) => {
      client.emit('weight', observer.subject.weight)
      tableUpdate()
    })

  })

  client.on('dateinput', function (data) {

    Weight.find({}).sort({ date: -1 }).exec(function (err, result) {
      if (err) throw err

      if (result) {
        let expectedWeights = []
        let today = new Date(data)
        let cYear = today.getFullYear()
        let cMonth = today.getMonth() + 1
        let cDay = today.getDate()

        for (var i = 0; i < this.result.length; i++) {

          let date = result[i].date
          let year = date.getFullYear()
          let month = date.getMonth() + 1
          let day = date.GetDate()

          if (year === cYear && month === cMonth && day === cDay) {
            expectedWeights.push(result[i])
          }
        }
        client.emit('updatebydate', expectedWeights)
      }
    })

  })

  client.on('disconnect', function () {
    console.log('Client disconnected')
  })

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Server listening on port ' + port);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
